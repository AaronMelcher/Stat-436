filter("B_day" < 2000 & "Country" == "India")
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in <- ratings.standard <-
filter(ratings.standard.B_day < 2000 & Country == "India")
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in <- ratings.standard
ggplot(ratings.standard.in, aes(x=Rating , color=Sex)) + geom_density()
install.packages("ggplot")
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in <- ratings.standard %>%
filter(B_day < 2000 & Country == "India")
ratings.standard = read_csv("chess.csv.gz")
ratings.standard = read.csv("chess.csv.gz")
p_a = rpois(100, 3.14)
mean(p_a)
hist(p_a)
abline(v=3.14, col='black', lwd=3)
abline(v=mean(p_a), col="red", lwd=3)
ppois(100, 100)
p_d = rnorm(1e4)
print("1 SD:")
print(sum(p_d > -1 & p_d < 1)/length(p_d))
print("2 SD:")
sum(p_d > -2 & p_d < 2)/length(p_d)
print("3 SD:")
sum(p_d > -3 & p_d < 3)/length(p_d)
rmaxexp <- function(n, m) {
v = rep(0, n)
for (j in 1:n){
v[j] = max(rexp(m))
}
return(v)
}
random_seating <- function() {
seating = sample(100, 100)
for(i in 1:length(seating)){
if(i == seating[i]){
return(FALSE)
}
}
return(TRUE)
}
mc = 1e4
test_stats_p100 = rep(0, mc)
for(i in 1:mc){
test_stats_p100[i] = random_seating()
}
estimate_of_p100 <- sum(test_stats_p100)/mc
estimate_of_p100
examCDF <- function(t) {
if(t > 1) {
return(1)
} else if(t <= 0) {
return(0)
} else {
return (.5 + ((1/pi)*asin(2*t - 1)))
}
}
examdensity <- function(t) {
return( 2 / ( pi * sqrt( 1 - (2*t - 1)**2 )) )
}
examCDFinv <- function(t) {
return( ( sin( (t-.5) * pi) + 1 )/2 )
}
rvs = examCDFinv(runif((1000)))
hist(rvs, freq=FALSE)
lines(examdensity(rvs), col=4, lwd=2)
qnorm(.95)
qnorm(.99)
qnorm(.025)
qnorm(.975)
qnorm(.005)
qnorm(.995)
qexp(.95)
qexp(.99)
# Treatment data
# Number of hairballs coughed up by each of the 25 cats in the treatment group.
treatment <- c(3, 2, 4, 4, 3, 4, 1, 2, 4, 5, 2, 5, 3, 0, 3, 2, 2, 3, 4, 5, 3, 2, 1, 3, 2)
# Control data
# Number of hairballs coughed up by each of the 25 cats in the control group.
control <- c(1, 2, 1, 3, 1, 0, 1, 3, 2, 4, 2, 3, 5, 2, 2, 3, 3, 1, 3, 2, 2, 4, 0, 1, 2)
test_stat <- function(ctl, trt) {
pool = c(ctl, trt)
n_ctl = length(ctl)
n_trt = length(trt)
n_tot = n_ctl + n_trt
shuffled = sample(pool, n_tot, replace=FALSE)
shuff_ctl = shuffled[1:n_ctl]
shuff_trt = shuffled[(n_ctl+1):n_tot]
return(mean(shuff_trt) - mean(shuff_ctl))
}
actual_stat = mean(treatment) - mean(control)
mc_q5 = 1e4
test_stats_q5 = rep(0, mc_q5)
for(i in 1:mc_q5){
test_stats_q5[i] = test_stat(control, treatment)
}
p_value = sum(test_stats_q5 >= actual_stat)/mc_q5
p_value
# TODO: code, if necessary, goes here.
# TODO: uncomment the lines below and complete them
#
ratings.standard = read_csv("chess.csv.gz")
# TODO: uncomment the lines below and complete them
#
ratings.standard = read.csv("chess.csv.gz")
head(ratings.standard)
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in <- ratings.standard %>%
filter(B_day < 2000 & Country == "India")
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in <- ratings.standard.filter(B_day < 2000 & Country == "India")
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in = ratings.standard.filter(B_day < 2000 & Country == "India")
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in = ratings.standard.filter(B_day < 2000 & Country == "India")
# TODO: uncomment the lines below and complete them
#
ratings.standard.in %>%
group_by(Sex) %>%
summarise(num=n(),  # for help, see dplyr.tidyverse.org/reference/n.html
mean = mean(Rating),
max  = max(Rating) )
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in <- ratings.standard %>%
filter(B_day < 2000 & Country == "India")
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in <- ratings.standard <-
filter(B_day < 2000 & Country == "India")
generate_data <- function( nsamp, lambda=1 ) {
return(rpois(nsamp, lambda))
}
generate_data <- function( nsamp, lambda=1 ) {
return(rpois(nsamp, lambda))
}
estimate_pois_mean <- function( data ) {
return(mean(data))
}
estimate_pois_var <- function( data ) {
# One option is to be lazy and use the fact that mean=var=lambda in Poisson
return( estimate_pois_mean( data ) );
}
CLT_CI <- function( data, alpha=0.05) {
# Step 1. use data to get Xbar and the variance estimate.
xbar = estimate_pois_mean(data)
variance = estimate_pois_var(data)
# Step 2. Use the estimated variance and choice of alpha to construct
# a two-sided confidence interval for lambda
# (sorry, Z-scores are going to show up here, but only briefly!)
pos_end = xbar + qnorm(1-alpha/2)*variance
neg_end = xbar - qnorm(alpha/2)*variance
# Return the CI. Be careful-- depending on how you got your CI, it
# might not be a simple vector (e.g., it might have a header).
# Feel free to use the lecture code for reference.
return(c(neg_end, pos_end))
}
simulation_CI <- function( data, alpha=0.05) {
mc = 500
replicates = rep(NA, mc)
n = length(data)
lambda = mean(data)
for ( i in 1:mc) {
fake_data = rpois(n=n, lambda=lambda);
replicates[i] = mean( fake_data );
}
# Return a vector c(L, U) with L the left end and U the right ("upper") end of the CI.
return( quantile( replicates, probs=c(alpha/2, 1-alpha/2) ) )
}
contained <- function( myCI, trueparam ) {
return( (myCI[1] < trueparam) & (trueparam < myCI[2]) )
}
contained <- function( myCI, trueparam ) {
return( (myCI[1] < trueparam) & (trueparam < myCI[2]) )
}
estimate_coverage <- function( CI_fn, NMC, nsamp, lambdatrue=1, alpha=0.05 ) {
coverages <- 0; # Count how often the CI "catches" lambdatrue
for (i in 1:NMC ) {
# Generate data: nsamp draws from Poisson( lambdatrue )
data <- rpois(n=nsamp, lambda=lambdatrue);
# Construct a confidence interval from it using the given CI function
CI = CI_fn(data, alpha)
# if lambdatrue is in the CI, increment coverages.
if ( contained( CI, lambdatrue )  ) {
coverages = coverages + 1
}
}
return( coverages/NMC )
}
estimate_coverage(CLT_CI, 200, 10)
estimate_coverage(simulation_CI, 200, 10)
download.file('https://kdlevin-uwstat.github.io/STAT340-Fall2021/hw/03/mule_kicks.csv', destfile='mule_kicks.csv');
mule_kicks <- read.csv('mule_kicks.csv', header=TRUE);
head(mule_kicks);
lambdahat <- mean(mule_kicks$deaths)
variance = mean(mule_kicks$deaths)
max_mule_end = lambdahat + qnorm(.975)*variance
min_mule_end = lambdahat - qnorm(.025)*variance
min_mule_end
library(MASS)
# This library includes a multivariate normal
mu <- c(.5, .5)
# Vector of means; both W_p and M_p are mean 1/2.
# Make a two-by-two symmetric matrix to encode variance and covariance
CovMx <- matrix(c(.05^2, .04^2, .04^2, .05^2), nrow = 2)
WpMp <- mvrnorm(n = 2000, mu = mu, Sigma = CovMx)
# Separate the Wp and Mp variable for
Wp <- WpMp[, 1]
Mp <- WpMp[, 2]
goofus_estimate <- function(w, m) {
return(var(w) + var(m))
}
gallant_estimate <- function(w, m) {
return(var(c(w, m)))
}
goofus_estimate(Wp, Mp)
gallant_estimate(Wp, Mp)
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in = ratings_standard[B_day < 2000 & Country == "India"]
# TODO: uncomment the lines below and complete them
#
ratings.standard = read.csv("chess.csv.gz")
head(ratings.standard)
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.standard.in = ratings.standard[B_day < 2000 & Country == "India"]
# TODO: uncomment the lines below and complete them
#
ratings = read.csv("chess.csv.gz")
head(ratings.standard)
# TODO: uncomment the lines below and complete them
#
ratings = read.csv("chess.csv.gz")
head(ratings)
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ratings.in = ratings[ratings$B_day < 2000 & ratings$Country == "India"]
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
ggplot(ratings, aes(x=Rating , color=Sex)) + geom_density()
# TODO: uncomment the lines below and complete them
# Note: & can be used to filter 2 criteria (e.g., bday and country)
#
library(ggplot2)
ggplot(ratings, aes(x=Rating , color=Sex)) + geom_density()
ratings = read.csv("chess.csv.gz")
ratings = read.csv("chess.csv.gz")
library(ggplot2)
ggplot(ratings, aes(x=Rating , color=Sex)) + geom_density()
setwd("~/Fall2024/Stat-436/Homework/hw2")
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
library(shiny)
# Data setup - gathering sets and
ballon_dor <- read_csv("BallonDOr.csv")
nationalities <- pull(ballon_dor, Nationality) |>
unique() |>
na.omit()
years <- pull(ballon_dor, Year) |>
unique() |>
na.omit()
ranks <- c(1, 2, 3, 4, 5)
winner_graph <- function() {
ballon_dor |>
group_by(Year) |>
summarise(Winner = Player[Rank == 1],
Total_Points = Points[Rank == 1],
Nationality = Nationality[Rank == 1],
Club = Club[Rank == 1],
Rank_Points = RankPts[Rank == 1],
Share = Share[Rank == 1],
Percent = Percent[Rank == 1]
) |>
arrange(Year)
}
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
library(shiny)
# Data setup - gathering sets and
ballon_dor <- read_csv("BallonDOr.csv")
nationalities <- pull(ballon_dor, Nationality) |>
unique() |>
na.omit()
years <- pull(ballon_dor, Year) |>
unique() |>
na.omit()
ranks <- c(1, 2, 3, 4, 5)
winner_graph <- function() {
ballon_dor |>
group_by(Year) |>
summarise(Winner = Player[Rank == 1],
Total_Points = Points[Rank == 1],
Nationality = Nationality[Rank == 1],
Club = Club[Rank == 1],
Rank_Points = RankPts[Rank == 1],
Share = Share[Rank == 1],
Percent = Percent[Rank == 1]
) |>
arrange(Year)
}
### shiny app definition
ui <- fluidPage(
titlePanel("Ballon D'Or Rankings Analysis"),
checkboxGroupInput("ranks", "Ranks", ranks, ranks)
)
server <- function(input, output) {
}
shinyApp(ui, server)
### shiny app definition
ui <- fluidPage(
titlePanel("Ballon D'Or Rankings Analysis"),
fluidRow(
column(6,
h4("Select Ballon D'Or Rank (1-5):"),
checkboxGroupInput("ranks", "Ranks", ranks, ranks)
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
library(tidyverse)
library(ggplot2)
library(shiny)
theme_set(theme_classic())
# Data setup - gathering sets and
ballon_dor <- read_csv("BallonDOr.csv")
nationalities <- pull(ballon_dor, Nationality) |>
unique() |>
na.omit()
years <- pull(ballon_dor, Year) |>
unique() |>
na.omit()
ranks <- c(1, 2, 3, 4, 5)
winner_graph <- function() {
ballon_dor |>
group_by(Year) |>
summarise(Winner = Player[Rank == 1],
Total_Points = Points[Rank == 1],
Nationality = Nationality[Rank == 1],
Club = Club[Rank == 1],
Rank_Points = RankPts[Rank == 1],
Share = Share[Rank == 1],
Percent = Percent[Rank == 1]
) |>
arrange(Year)
}
### shiny app definition
ui <- fluidPage(
titlePanel("Ballon D'Or Rankings Analysis"),
fluidRow(
column(6,
h4("Select Ballon D'Or Rank (1-5):"),
checkboxGroupInput("ranks", "Ranks", ranks, ranks)
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
### shiny app definition
ui <- fluidPage(
titlePanel("Ballon D'Or Rankings Analysis"),
fluidRow(
column(6,
h4("Select Ballon D'Or Rank (1-5):"),
checkboxGroupInput("ranks", "Ranks", ranks, ranks)
),
column(6,
h4("Filter years (1956-2023):"),
sliderInput("year", "Year", min = min(years), max = max(years), c(1956, 2023), sep = "")
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
### shiny app definition
ui <- fluidPage(
titlePanel("Ballon D'Or Rankings Analysis"),
fluidRow(
column(6,
h4("Select Ballon D'Or Rank (1-5):"),
checkboxGroupInput("ranks", "Ranks", ranks, ranks, inline = TRUE)
),
column(6,
h4("Filter years (1956-2023):"),
sliderInput("year", "Year", min = min(years), max = max(years), c(1956, 2023), sep = "")
)
)
)
server <- function(input, output) {
}
shinyApp(ui, server)
### shiny app definition
ui <- fluidPage(
titlePanel("Ballon D'Or Rankings Analysis"),
fluidRow(
column(6,
h4("Select Ballon D'Or Rank (1-5):"),
checkboxGroupInput("ranks", "Ranks", ranks, ranks, inline = TRUE)
),
column(6,
h4("Filter years (1956-2023):"),
sliderInput("year", "Year", min = min(years), max = max(years), c(1956, 2023), sep = "")
)
),
fluidRow(
column(6,
plotOutput()
),
column(6,
plotOuput()
)
),
fluidRow(
column(12,
h4("Ballon D'Or Rankings Table"),
dataTableOutput()
)
)
)
### shiny app definition
ui <- fluidPage(
titlePanel("Ballon d'Or Rankings Analysis"),
fluidRow(
column(6,
h4("Select Ballon d'Or Rank (1-5):"),
checkboxGroupInput("ranks", "Ranks", ranks, ranks, inline = TRUE)
),
column(6,
h4("Filter years (1956-2023):"),
sliderInput("year", "Year", min = min(years), max = max(years), c(1956, 2023), sep = "")
)
),
fluidRow(
column(6,
plotOutput("rankDist")
),
column(6,
plotOuput("countryWins")
)
),
fluidRow(
column(12,
h4("Ballon D'Or Rankings Table"),
dataTableOutput("playerTable")
)
)
)
### shiny app definition
ui <- fluidPage(
titlePanel("Ballon d'Or Rankings Analysis"),
fluidRow(
column(6,
h4("Select Ballon d'Or Rank (1-5):"),
checkboxGroupInput("ranks", "Ranks", ranks, ranks, inline = TRUE)
),
column(6,
h4("Filter years (1956-2023):"),
sliderInput("year", "Year", min = min(years), max = max(years), c(1956, 2023), sep = "")
)
),
fluidRow(
column(6,
plotOutput("rankDist")
),
column(6,
plotOutput("countryWins")
)
),
fluidRow(
column(12,
h4("Ballon D'Or Rankings Table"),
dataTableOutput("playerTable")
)
)
)
server <- function(input, output) {
# Density plot for point distribution by rank
output$rankDist <- renderPlot({
ggplot(point_distribution, aes(x = Points)) +
geom_density(fill = "lightblue") +
labs(x = "Points", y = "Density", title = "Density Plot of Points Distribution by Rank")
})
}
shinyApp(ui, server)
