setwd("~/Repos/Stat-436")
setwd("~/Repos/Stat-436/In-Class Exercises")
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(shiny)
library(DT) # for shiny's table
install.packages("DT")
library(tidyverse)
library(shiny)
library(DT) # for shiny's table
theme_set(theme_bw())
birds <- read_csv("https://raw.githubusercontent.com/krisrs1128/stat479_s22/main/exercises/data/birds.csv") |>
separate(Species, c("genus", "species2"))
bird_summaries <- birds |>
group_by(genus) |>
summarise(
across(
c("Asymmetry", "Ellipticity",
"AvgLength (cm)", "Number of images",
"Number of eggs"),
list(
MEAN = mean,
STANDARD_DEVIATION = sd)
)
) |>
arrange(-Ellipticity_MEAN)
scatter <- function(df, selected) {
palette <- c("#d4d4d4", "black")
df |>
mutate(selected_ = selected) |>
ggplot() +
geom_point(aes(Asymmetry, Ellipticity, color = as.factor(selected_))) +
scale_color_manual(values = palette)
}
ui <- fluidPage(
titlePanel("Birds Brushed Scatterplot"),
plotOutput("plot", brush = "scatter_brush"),
DTOutput("table")
)
server <- function(input, output) {
selected <- reactiveVal(rep(TRUE, nrow(birds)))
observeEvent(
input$scatter_brush, {
brushed_points <- brushedPoints(birds, input$scatter_brush, allRows = TRUE)
selected(brushed_points$selected_)
}
)
output$plot <- renderPlot(scatter(birds, selected()))
output$table <- renderDT(filter(birds, selected()))
}
shinyApp(ui, server)
# Setup with initial packages
library(tidyverse)
library(shiny)
library(DT) # for shiny's table
theme_set(theme_bw())
# Read in data
birds <- read_csv("https://raw.githubusercontent.com/krisrs1128/stat479_s22/main/exercises/data/birds.csv") |>
separate(Species, c("genus", "species2"))
# Setup with initial packages
library(tidyverse)
library(shiny)
library(DT) # for shiny's table
theme_set(theme_bw())
# Read in data
birds <- read_csv("https://raw.githubusercontent.com/krisrs1128/stat479_s22/main/exercises/data/birds.csv") |>
separate(Species, c("genus", "species2"))
# Create a scatter function for use in the ui page
scatter <- function(df, selected) {
palette <- c("#d4d4d4", "black")
df |>
mutate(selected_ = selected) |>
ggplot() +
geom_point(aes(Asymmetry, Ellipticity, color = as.factor(selected_))) +
scale_color_manual(values = palette)
}
# Generate the Shiny UI basics
ui <- fluidPage(
titlePanel("Birds Brushed Scatterplot"),
plotOutput("plot", brush = "scatter_brush"),
DTOutput("table")
)
# Server function for use in the shiny ui
server <- function(input, output) {
selected <- reactiveVal(rep(TRUE, nrow(birds)))
observeEvent(
input$scatter_brush, {
brushed_points <- brushedPoints(birds, input$scatter_brush, allRows = TRUE)
selected(brushed_points$selected_)
}
)
output$plot <- renderPlot(scatter(birds, selected()))
output$table <- renderDT(filter(birds, selected()))
}
# Start the Shiny server
shinyApp(ui, server)
